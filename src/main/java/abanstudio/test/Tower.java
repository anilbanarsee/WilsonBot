/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abanstudio.test;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author Reetoo
 */
public class Tower
{


	public static void main(String[] args)
	{

		String s = "204 292 172 142 69 66 54 265 193 87 237 72 202 9 179 78 180 100 22 203 264 200 92 106 34 117 19 288 170 276 " +
				"247 221 285 131 181 223 21 245 147 37 71 233 97 90 51 153 273 170 6 110 12 280 280 196 170 244 263 56 285 227 " +
				"37 189 40 180 225 113 161 77 110 28 120 268 191 128 287 8 238 220 259 35 128 233 134 151 172 101 181 141 64 35 " +
				"39 220 39 179 225 162 234 255 21 49 37 298 26 83 246 170 149 215 1 11 145 102 169 101 273 101 169 92 179 157 " +
				"164 199 281 164 74 211 142 6 68 203 79 277 120 178 280 70 113 291 227 26 297 176 110 244 11 19 23 203 283 133 " +
				"18 287 161 7 213 112 98 52 71 212 66 225 48 282 195 121 38 280 290 195 137 166 278 289 105 161 223 165 43 232 " +
				"231 39 2 116 89 146 75 209 225 243 184 40 76 264 297 195 168 152 118 1 75 23 72 115 271 126 148 272 161 107 " +
				"51 35 90 270 217 157 245 289 190 10 211 107 29 60 18 299 66 159 21 89 55 272 188 269 49 213 43 159 79 250 " +
				"145 24 146 20 202 121 198 35 139 79 190 87 108 35 234 93 26 25 163 296 112 190 111 229 228 282 109 135 1 167 " +
				"296 103 5 193 31 104 107 96 260 164 86 113 140 131 126 287 252 219 4 78 108 159 196 36 167 65 10 124 60 219 " +
				"11 210 284 142 159 105 49 210 132 67 269 292 146 161 134 238 31 53 147 234 60 224 8 199 200 50 61 27 175 276 " +
				"225 296 194 131 296 234 73 173 228 264 47 104 193 13 231 243 100 215 98 200 168 66 211 260 275 58 124 58 32 38 " +
				"278 278 220 6 190 118 228 121 36 83 85 80 140 204 101 299 53 299 276 178 240 230 76 93 227 211 50 26 48 26 " +
				"173 62 47 148 144 137 224 8 152 149 180 169 193 104 90 270 253 267 267 258 242 238 12 108 12 208 42 136 204 136 " +
				"13 5 47 282 94 96 124 252 221 137 161 248 52 62 277 234 196 51 249 47 31 278 251 246 37 190 127 252 266 251 " +
				"290 124 298 58 122 278 288 171 70 178 116 114 116 3 203 112 171 97 17 266 137 233 286 143 79 234 191 172 247 232 " +
				"52 9 236 105 200 178 107 217 229 213 280 25 35 223 43 248 277 280 46 220 37 244 183 227 278 221 246 43 231 239 " +
				"202 231 183 161 145 0 141 111 234 9 33 16 8 208 77 62 183 267 292 120 49 243 6 295 34 19 239 186 131 299 " +
				"5 204 147 263 93 131 175 57 223 176 266 178 1 36 31 121 1 234 87 273 220 286 155 98 256 83 138 273 48 157 " +
				"8 29 173 240 271 21 140 52 133 16 238 297 133 182 63 274 261 200 226 123 156 174 64 261 97 127 267 288 218 8 " +
				"7 68 242 91 112 87 193 30 108 53 20 124 228 224 167 156 130 113 7 48 208 295 16 0 118 274 21 22 228 78 " +
				"226 22 121 79 4 63 241 220 216 75 32 168 36 23 236 192 41 209 238 111 195 25 274 88 298 279 58 262 125 37 " +
				"43 6 247 78 132 31 71 73 10 282 233 158 272 205 78 45 177 59 212 221 259 217 48 62 180 229 187 38 25 131 " +
				"266 290 242 18 4 169 196 96 90 139 176 157 84 67 185 122 87 52 147 100 57 0 58 47 294 222 234 145 127 49 " +
				"20 34 64 115 289 106 209 42 170 173 178 216 120 163 181 142 236 292 120 190 197 251 43 91 193 128 207 35 48 139 " +
				"232 208 14 147 253 24 274 290 273 48 287 143 275 122 272 236 8 297 36 106 8 138 285 26 8 216 158 141 147 43 " +
				"117 141 144 180 218 127 236 288 9 151 195 107 123 112 204 168 171 40 257 84 234 80 34 33 36 106 296 68 269 96 " +
				"232 100 1 126 119 90 260 76 126 187 261 82 101 11 87 216 155 40 226 264 153 265 227 163 270 152 104 34 100 69 " +
				"115 70 268 171 166 170 205 244 36 30 246 17 121 240 268 187 296 53 65 259 64 170 226 82 126 182 155 3 6 211 " +
				"165 262 151 242 217 126 252 163 108 134 127 289 64 218 194 119 41 217 101 38 293 42 72 20 155 242 114 122 189 189";

		String[] values = s.split(" ");
		int n = 30;
		int m = 30;

		int nx = 0;
		int mx = 0;

		int[][] tower = new int[n][m];

		for (String val : values) {
			tower[nx][mx] = Integer.parseInt(val);
			mx++;
			if (mx >= m) {
				mx = 0;
				nx++;
			}
		}
		//for(int[] t : tower)
		//System.out.println(Arrays.toString(t));
		//int[][] tower  = {{3,2,2},{1,3,2}};
		//int[][] tower  = {{3,3,3},{3,3,3},{3,3,3}};
		System.out.println(towerTotal(tower));
	}

	public static int towerTotal(int[][] hMap)
	{

		int[][] areas = new int[hMap.length][hMap[0].length];

		for (int i = 0; i < hMap.length; i++) {
			for (int j = 0; j < hMap[i].length; j++) {


				int val = hMap[i][j];
				int area = val * 4;


				int y = i - 1;
				if (!(y < 0)) {
					int check = hMap[y][j];
					if (check > val)
						check = val;
					area = area - check;
				}
				y = i + 1;
				if (!(y >= hMap.length)) {
					int check = hMap[y][j];
					if (check > val)
						check = val;
					area = area - check;
				}
				y = j - 1;
				if (!(y < 0)) {
					int check = hMap[i][y];
					if (check > val)
						check = val;
					area = area - check;
				}
				y = j + 1;
				if (!(y >= hMap[i].length)) {
					int check = hMap[i][y];
					if (check > val)
						check = val;
					area = area - check;
				}

				areas[i][j] = area;

			}
		}

		int totalArea = 0;
		for (int i = 0; i < hMap.length; i++) {
			for (int j = 0; j < hMap[i].length; j++) {
				//System.out.println(areas[i][j]);
				totalArea += areas[i][j];
			}
		}

		for (int[] a : hMap) {
			System.out.println(Arrays.toString(a));
		}
		System.out.println("------------------------");
		for (int[] a : areas) {
			System.out.println(Arrays.toString(a));
		}

		return totalArea;
	}

}
